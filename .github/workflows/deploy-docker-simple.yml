name: Deploy to EC2 with Docker (Simple)

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'main.py'
      - 'requirements.txt'
      - 'Dockerfile'
      - '.github/workflows/deploy-docker-simple.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH key for EC2
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Deploy to EC2
      env:
        DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
          set -e
          echo "Starting deployment..."

          # Install dependencies
          if ! command -v git &> /dev/null; then
            echo "Installing git..."
            sudo yum update -y
            sudo yum install git -y
          fi
          
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl enable docker
            sudo systemctl start docker
          fi

          # Ensure Docker is running
          sudo systemctl status docker --no-pager

          # Configure git to handle divergent branches
          git config --global pull.rebase false

          # Clone or update repository
          cd ~
          if [ -d "discord_chatbot" ]; then
            echo "Updating existing repository..."
            cd discord_chatbot
            # Reset any local changes and pull fresh
            git fetch origin
            git reset --hard origin/main
            git pull origin main
          else
            echo "Cloning repository..."
            git clone https://github.com/toanpn/discord_chatbot.git
            cd discord_chatbot
          fi

          # Create environment file
          echo "Creating .env file..."
          cat > .env << 'ENDENV'
        DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
        GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
        ENDENV

          # Build Docker image
          echo "Building Docker image..."
          sudo docker build -t discord-bot:latest . --no-cache

          # Stop existing container
          echo "Stopping existing container..."
          sudo docker stop discord-bot-container 2>/dev/null || echo "No existing container to stop"
          sudo docker rm discord-bot-container 2>/dev/null || echo "No existing container to remove"

          # Run new container
          echo "Starting new container..."
          sudo docker run -d \
            --name discord-bot-container \
            --restart unless-stopped \
            --env-file .env \
            discord-bot:latest

          # Wait a moment for container to start
          sleep 5

          # Check status
          echo "Container status:"
          sudo docker ps | grep discord-bot-container || echo "Container not running!"
          
          echo "Container logs:"
          sudo docker logs discord-bot-container --tail 10

          echo "Deployment completed!"
        ENDSSH