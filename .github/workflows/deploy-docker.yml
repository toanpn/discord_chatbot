name: Deploy to EC2 with Docker (DISABLED)

on:
  workflow_dispatch:
  # Disabled automatic triggers to avoid conflicts
  # push:
  #   branches:
  #     - main
  #   paths-ignore:
  #     - '**.md'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH key for EC2
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: SSH into EC2 and deploy
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
          set -e

          # Install git and docker if not available
          if ! command -v git &> /dev/null; then
            sudo yum install git -y || sudo apt-get install git -y
          fi
          if ! command -v docker &> /dev/null; then
            sudo yum install -y docker || sudo apt-get install -y docker.io
            sudo systemctl enable docker
            sudo systemctl start docker
            sudo usermod -a -G docker $(whoami)
            # Need to restart shell for group changes to take effect
            newgrp docker
          fi

          # Trust github.com
          ssh-keyscan github.com >> ~/.ssh/known_hosts 2>/dev/null || true

          # Pull or clone code
          cd ~
          if [ -d "discord_chatbot" ]; then
            cd discord_chatbot
            git pull origin main
          else
            git clone https://github.com/toanpn/discord_chatbot.git
            cd discord_chatbot
          fi

          # Create .env file with secrets
          cat > .env << 'ENDENV'
        DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
        GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
        ENDENV

          # Build Docker image
          sudo docker build -t discord-bot:latest .

          # Stop and remove existing container if it exists
          if [ "$(sudo docker ps -a -q -f name=discord-bot-container)" ]; then
            sudo docker stop discord-bot-container
            sudo docker rm discord-bot-container
          fi

          # Run new container with environment variables
          sudo docker run -d \
            --name discord-bot-container \
            --restart always \
            --env-file .env \
            discord-bot:latest

          # Check container status
          sudo docker ps | grep discord-bot-container || echo "Container not found"
          
          # Show container logs for debugging
          sudo docker logs discord-bot-container --tail 20
        ENDSSH 