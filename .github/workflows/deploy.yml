name: Deploy Discord Bot

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'main.py'
      - 'requirements.txt'
      - 'Dockerfile'
      - '.github/workflows/deploy.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Deploy to EC2
      env:
        DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
          set -e
          echo "üöÄ Starting deployment..."

          # Install dependencies if needed
          if ! command -v git &> /dev/null; then
            echo "üì¶ Installing git..."
            sudo yum update -y && sudo yum install -y git
          fi
          
          if ! command -v docker &> /dev/null; then
            echo "üê≥ Installing Docker..."
            sudo yum update -y && sudo yum install -y docker
            sudo systemctl enable docker
            sudo systemctl start docker
            sudo usermod -a -G docker $USER
          fi

          # Ensure Docker is running
          sudo systemctl start docker

          # Configure git
          git config --global pull.rebase false

          # Update repository
          cd ~
          if [ -d "discord_chatbot" ]; then
            echo "üîÑ Updating repository..."
            cd discord_chatbot
            git fetch origin
            git reset --hard origin/main
            git pull origin main
          else
            echo "üì• Cloning repository..."
            git clone https://github.com/toanpn/discord_chatbot.git
            cd discord_chatbot
          fi

          # Create environment file
          echo "‚öôÔ∏è Setting up environment..."
          cat > .env << 'ENDENV'
        DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
        GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
        ENDENV

          # Stop and remove existing containers (both names)
          echo "üõë Stopping existing containers..."
          sudo docker stop discord-bot 2>/dev/null || true
          sudo docker stop discord-bot-container 2>/dev/null || true
          sudo docker rm discord-bot 2>/dev/null || true
          sudo docker rm discord-bot-container 2>/dev/null || true

          # Build new image (with pip cache preserved)
          echo "üî® Building Docker image..."
          sudo docker build -t discord-bot:latest .

          # Run new container
          echo "‚ñ∂Ô∏è Starting new container..."
          sudo docker run -d \
            --name discord-bot \
            --restart unless-stopped \
            --env-file .env \
            discord-bot:latest

          # Wait for container to start
          sleep 3

          # Check deployment status
          echo "‚úÖ Checking deployment status..."
          if sudo docker ps | grep -q discord-bot; then
            echo "üéâ Deployment successful!"
            sudo docker logs discord-bot --tail 5
          else
            echo "‚ùå Deployment failed!"
            sudo docker logs discord-bot --tail 10
            exit 1
          fi
        ENDSSH 